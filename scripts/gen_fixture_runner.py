#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import sys
import glob
import os
import io
import getopt


def usage(cmd):
    print(cmd)
    print('''
--help       | -h   display this help
--test       | -t   the directory which contains the test source code
--prefix     | -p   the prefix of the test source file, default: test_
--output     | -o   the output file, default: stdout
    ''')


def find_test_groups(content: str):
    return re.findall(r'^TEST_GROUP\s*\(\s*(\w+)\s*\)\s*;*', content, re.M)


def find_test_cases(content: str, group: str):
    return re.findall(r'^TEST\({},\s*(\w+)\)\s*;*'.format(group), content,
                      re.M)


def scan_tests(path: str, prefix: str = 'test_') -> dict:
    test_groups = {}

    for file in glob.glob(os.path.join(path, '{}*.c'.format(prefix))):
        content = open(file).read()
        for group in find_test_groups(content):
            test_groups[group] = test_groups.get(group, []) + find_test_cases(
                content, group)

    return test_groups


def gen_fixture_runner(path: str, prefix: str, file=sys.stdout):
    if not isinstance(file, io.IOBase):
        file = open(file, 'w')

    test_groups = scan_tests(path, prefix)

    print('/* AUTOGENERATED FILE. DO NOT EDIT. */', file=file)
    print('', file=file)
    print('#include "unity_fixture.h"', file=file)
    print('', file=file)

    for group, cases in test_groups.items():
        print('TEST_GROUP_RUNNER({})'.format(group), file=file)
        print('{', file=file)
        for case in cases:
            print('    RUN_TEST_CASE({}, {});'.format(group, case), file=file)
        print('}', file=file)
        print('', file=file)

    print('static void RunAllTests(void)', file=file)
    print('{', file=file)
    for group in test_groups:
        print('    RUN_TEST_GROUP({});'.format(group), file=file)
    print('}', file=file)
    print('', file=file)
    print('int main(int argc, const char * argv[])', file=file)
    print('{', file=file)
    print('    return UnityMain(argc, argv, RunAllTests);', file=file)
    print('}', file=file, flush=True)


if __name__ == "__main__":
    test = None
    prefix = 'test_'
    output = sys.stdout

    try:
        opts, args = getopt.getopt(sys.argv[1:], "ht:p:o:",
                                   ["help", "test=", "prefix=", "output="])
    except getopt.GetoptError:
        usage(sys.argv[0])
        sys.exit(1)

    for o, a in opts:
        if o in ('-h', '--help'):
            usage(sys.argv[0])
            exit(0)
        elif o in ('-t', '--test'):
            test = a
        elif o in ('-p', '--prefix'):
            prefix = a
        elif o in ('-o', '--output'):
            output = a
        else:
            usage(sys.argv[0])
            sys.exit(1)

    if test is None:
        usage(sys.argv[0])
        sys.exit(1)

    gen_fixture_runner(test, prefix, output)
